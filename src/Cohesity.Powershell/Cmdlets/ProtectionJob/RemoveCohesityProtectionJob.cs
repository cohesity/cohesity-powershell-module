// Copyright 2018 Cohesity Inc.
using System.Management.Automation;
using Cohesity.Powershell.Common;

namespace Cohesity.Powershell.Cmdlets.ProtectionJob
{
    /// <summary>
    /// <para type="synopsis">
    /// Removes a protection job.
    /// </para>
    /// <para type="description">
    /// Returns success if the protection job is deleted.
    /// </para>
    /// </summary>
    /// <example>
    ///   <para>PS&gt;</para>
    ///   <code>
    ///   Remove-CohesityProtectionJob -Id 1234
    ///   </code>
    ///   <para>
    ///   Removes a protection job with the Id of 1234 and all snapshots generated by the protection job.
    ///   </para>
    /// </example>
    /// <example>
    ///   <para>PS&gt;</para>
    ///   <code>
    ///   Remove-CohesityProtectionJob -Id 1234 -KeepSnapshots
    ///   </code>
    ///   <para>
    ///   Removes a protection job with the Id of 1234, snapshots generated by the protection job are not deleted.
    ///   </para>
    /// </example>
    [Cmdlet(VerbsCommon.Remove, "CohesityProtectionJob",
        SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.High, DefaultParameterSetName = "ByName")]
    public class RemoveCohesityProtectionJob : PSCmdlet
    {
        private Session Session
        {
            get
            {
                var result = SessionState.PSVariable.GetValue("Session") as Session;
                if (result == null)
                {
                    result = new Session();
                    SessionState.PSVariable.Set("Session", result);
                }
                return result;
            }
        }

        #region Params

        /// <summary>
        /// <para type="description">
        /// Specifies the unique id of the protection job.
        /// </para>
        /// </summary>
        [Parameter(Mandatory = true, ValueFromPipelineByPropertyName = true, ParameterSetName = "ById")]
        [ValidateRange(1, long.MaxValue)]
        public long Id { get; set; }

        /// <summary>
        /// <para type="description">
        /// Specifies the name of the protection job.
        /// </para>
        /// </summary>
        [Parameter(Mandatory = true, ParameterSetName = "ByName")]
        [ValidateNotNullOrEmpty()]
        public string Name { get; set; }

        /// <summary>
        /// <para type="description">
        /// Specifies if snapshots generated by the protection job should be kept intact when the job is deleted.
        /// If not specified, the snapshots are also deleted when the protection job is deleted.
        /// </para>
        /// </summary>
        [Parameter(Mandatory = false)]
        public SwitchParameter KeepSnapshots { get; set; }

        #endregion

        #region Processing

        /// <summary>
        /// Preprocess
        /// </summary>
        protected override void BeginProcessing()
        {
            base.BeginProcessing();

            Session.AssertAuthentication();
        }

        /// <summary>
        /// Process
        /// </summary>
        protected override void ProcessRecord()
        {
            bool deleteSnapshots = true;
            string deleteSnapshotsCautionMessage;

            if (KeepSnapshots.IsPresent)
            {
                deleteSnapshotsCautionMessage = "This action keeps the snapshots generated by this protection job";
                deleteSnapshots = false;
            }
            else
            {
                deleteSnapshotsCautionMessage = "This action deletes the snapshots generated by this protection job";
            }

            if (!string.IsNullOrWhiteSpace(Name))
            {
                var job = RestApiCommon.GetProtectionJobByName(Session.ApiClient, Name);
                Id = (long)job.Id;
            }
 
            // POST /public/protectionJobState/{id}
            if (ShouldProcess($"Job Id: {Id}\". \"{deleteSnapshotsCautionMessage}"))
            {     
                var content = new
                {
                    DeleteSnapshots = deleteSnapshots
                };


                var preparedUrl = $"/public/protectionJobs/{Id.ToString()}";
                Session.ApiClient.Delete(preparedUrl, content);
                WriteObject($"Protection job with Id {Id} was deleted successfully.");
            }

            else
            {
                WriteObject($"Protection job with Id {Id} was not deleted.");
            }
        }
        #endregion
    }
}
