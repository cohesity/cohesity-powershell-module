// Copyright 2019 Cohesity Inc.

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Cohesity.Model
{
    /// <summary>
    /// SiteBackupFile
    /// </summary>
    [DataContract]
    public partial class SiteBackupFile :  IEquatable<SiteBackupFile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteBackupFile" /> class.
        /// </summary>
        /// <param name="filePath">Output file path on Windows proxy VM or on SMB share. This will be autogenerated when &#39;BackupSiteParam.data_dir_path&#39; is empty. The file &#39;sitetemplate.pnp&#39; in the directory contains the PnP site template..</param>
        /// <param name="fileSize">File size in bytes..</param>
        /// <param name="fileType">Type of file..</param>
        public SiteBackupFile(string filePath = default(string), long? fileSize = default(long?), int? fileType = default(int?))
        {
            this.FilePath = filePath;
            this.FileSize = fileSize;
            this.FileType = fileType;
            this.FilePath = filePath;
            this.FileSize = fileSize;
            this.FileType = fileType;
        }
        
        /// <summary>
        /// Output file path on Windows proxy VM or on SMB share. This will be autogenerated when &#39;BackupSiteParam.data_dir_path&#39; is empty. The file &#39;sitetemplate.pnp&#39; in the directory contains the PnP site template.
        /// </summary>
        /// <value>Output file path on Windows proxy VM or on SMB share. This will be autogenerated when &#39;BackupSiteParam.data_dir_path&#39; is empty. The file &#39;sitetemplate.pnp&#39; in the directory contains the PnP site template.</value>
        [DataMember(Name="filePath", EmitDefaultValue=true)]
        public string FilePath { get; set; }

        /// <summary>
        /// File size in bytes.
        /// </summary>
        /// <value>File size in bytes.</value>
        [DataMember(Name="fileSize", EmitDefaultValue=true)]
        public long? FileSize { get; set; }

        /// <summary>
        /// Type of file.
        /// </summary>
        /// <value>Type of file.</value>
        [DataMember(Name="fileType", EmitDefaultValue=true)]
        public int? FileType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString() { return ToJson(); }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SiteBackupFile);
        }

        /// <summary>
        /// Returns true if SiteBackupFile instances are equal
        /// </summary>
        /// <param name="input">Instance of SiteBackupFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteBackupFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilePath != null)
                    hashCode = hashCode * 59 + this.FilePath.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileType != null)
                    hashCode = hashCode * 59 + this.FileType.GetHashCode();
                return hashCode;
            }
        }

    }

}

